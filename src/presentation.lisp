(in-package :delectus)

(defun default-order-function (u v) nil)
(defun default-filter-function (x) t)

(defclass presentation ()
  ((model :reader model :initarg :model :initform (make-instance 'model))
   (changed? :accessor changed? :initform t)
   (order-function :accessor order-function :initform #'default-order-function)
   (filter-function :accessor filter-function :initform #'default-filter-function)
   (deleted-columns :accessor deleted-columns :initarg :deleted-columns :initform (seq:make))
   (deleted-rows :accessor deleted-rows :initarg :deleted-rows :initform (seq:make))
   (present-deleted? :accessor present-deleted? :initarg :present-deleted? :initform nil)
   (presented-columns :accessor presented-columns :initarg :presented-columns :initform (seq:make))
   (presented-rows :accessor presented-rows :initarg :presented-rows :initform (seq:make))))

(defmethod update ((pres presentation))
  (when (changed? pres)
    (let* ((live-columns (if (present-deleted? pres)
                             (columns (model pres))
                             (seq:filter (^ (col)(not (seq:contains? (deleted-columns pres) col :test #'eql)))
                                         (columns (model pres)))))
           (live-rows (if (present-deleted? pres)
                          (rows (model pres))
                          (seq:filter (^ (row)(not (seq:contains? (deleted-rows pres) row :test #'eql)))
                                      (rows (model pres)))))
           (filtered-rows (seq:filter (filter-function pres) live-rows))
           (sorted-rows (seq:sort (order-function pres) filtered-rows)))
      (setf (presented-columns pres) live-columns)
      (setf (presented-rows pres) sorted-rows)))
  (setf (changed? pres) nil))

(defmethod count-rows ((pres presentation))
  (update pres)
  (seq:length (presented-rows pres)))

(defmethod count-columns ((pres presentation))
  (update pres)
  (seq:length (presented-columns pres)))

(defmethod value-at ((pres presentation)(column-name string)(row integer))
  (update pres)
  (row-element (seq:element (presented-rows pres) row) (index (find-column (model pres) column-name))))

(defmethod put-value-at ((pres presentation)(column-name string)(row-index integer) val)
  (update pres)
  (set-row-element! (seq:element (presented-rows pres) row-index)
                    (index (find-column (model pres) column-name)) val)
  (setf (changed? pres) t))

(defmethod add-column ((pres presentation)(column string))
  (update pres)
  (add-column (model pres) column)
  (setf (changed? pres) t))

(defmethod add-row ((pres presentation))
  (clear-order-function! pres)
  (clear-filter-function pres)
  (update pres)
  (add-row (model pres))
  (setf (changed? pres) t))

(defmethod clear-order-function! ((pres presentation))
  (setf (order-function pres) #'default-order-function)
  (setf (changed? pres) t))

(defmethod set-order-function! ((pres presentation)(ofn function))
  (setf (order-function pres) ofn)
  (setf (changed? pres) t))

(defmethod clear-filter-function! ((pres presentation))
  (setf (filter-function pres) #'default-filter-function)
  (setf (changed? pres) t))

(defmethod set-filter-function! ((pres presentation)(ofn function))
  (setf (filter-function pres) ofn)
  (setf (changed? pres) t))

(defmethod delete-column! ((pres presentation)(column-name string))
  (let ((found-column (find-column (model pres) column-name)))
    (assert found-column () "No such column: '~A'" column-name)
    (setf (deleted-columns pres)(seq:add-last (deleted-columns pres) found-column))
    (setf (changed? pres) t)))

(defmethod delete-row! ((pres presentation)(row-index integer))
  (let ((found-row (seq:element (presented-rows pres) row-index)))
    (assert found-row () "No such row: '~A'" row-index)
    (setf (deleted-rows pres)(seq:add-last (deleted-rows pres) found-row))
    (setf (changed? pres) t)))
