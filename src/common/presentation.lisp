(in-package :delectus)

(defclass presentation ()
  ((model :accessor get-model :initarg :model)
   (changed? :accessor changed? :initform t)
   (show-deleted? :accessor show-deleted? :initform nil)
   (sort-column :accessor sort-column :initform nil)
   (reverse-sort? :accessor reverse-sort? :initform nil)
   (filter-string :accessor filter-string :initform nil)
   (presented-columns :accessor presented-columns)
   (presented-rows :accessor presented-rows)))

(defmethod compute-presented-columns ((pres presentation))
  (if (show-deleted? pres)
      (columns (get-model pres))
      (seq:filter (^ (col)(not (deleted? col)))
                  (columns (get-model pres)))))

(defmethod col< ((x string)(y string))
  (string< x y))

(defmethod col< ((x number)(y number))
  (< x y))

(defmethod col< ((x number)(y string))
  (string< (princ-to-string x) y))

(defmethod col< ((x string)(y number))
  (string< x (princ-to-string y)))

(defmethod sort-by-column ((pres presentation)(col column) rows)
  (let* ((index (column-index (get-model pres)(label col)))
         (less? (^ (u v) (col< (element u index)(element v index)))))
    (fset:sort rows less? )))

(defmethod compute-presented-rows ((pres presentation))
  (let* ((rows (if (show-deleted? pres)
                   (rows (get-model pres))
                   (seq:filter (^ (col)(not (deleted? col)))
                               (rows (get-model pres)))))
         (filtered-rows (if (filter-string pres)
                            (seq:filter (^ (row)(row-contains? row (filter-string pres)))
                                        rows)
                            rows))
         (sorted-rows (if (sort-column pres)
                          (let ((srows (sort-by-column pres (sort-column pres) filtered-rows)))
                            (if (reverse-sort? pres)
                                (seq:reverse srows)
                                srows))
                          filtered-rows)))
    sorted-rows))

(defmethod update ((pres presentation))
  (when (changed? pres)
    (setf (presented-columns pres)
          (compute-presented-columns pres))
    (setf (presented-rows pres) 
          (compute-presented-rows pres)))
  (setf (changed? pres) nil))

(defmethod count-columns ((pres presentation))
  (update pres)
  (seq:length (presented-columns pres)))

(defmethod count-rows ((pres presentation))
  (update pres)
  (seq:length (presented-rows pres)))

(defmethod column-index ((pres presentation)(column-name string))
  (update pres)
  (column-index (get-model pres) column-name))

(defmethod column-index ((pres presentation)(column column))
  (update pres)
  (column-index (get-model pres) (column-name column)))

(defmethod column-name ((pres presentation)(column-index integer))
  (update pres)
  (column-name (get-model pres) column-index))

(defmethod column-name ((pres presentation)(column column))
  (update pres)
  (label column))

(defmethod find-column ((pres presentation)(column-name string))
  (seq:find (^ (col)(equalp column-name (label col))) (presented-columns pres)))

(defmethod value-at ((pres presentation)(column-name string)(row-index integer))
  (update pres)
  (element (seq:element (presented-rows pres) row-index)
           (column-index pres column-name)))

(defmethod value-at ((pres presentation)(column column)(row-index integer))
  (update pres)
  (element (seq:element (presented-rows pres) row-index)
           (column-index pres column)))

(defmethod put-value-at! ((pres presentation)(column-name string)(row-index integer) val)
  (update pres)
  (setf (element (seq:element (presented-rows pres) row-index)
                 (column-index pres column-name))
        val)
  (setf (changed? pres) t))

(defmethod put-value-at! ((pres presentation)(column column)(row-index integer) val)
  (update pres)
  (setf (element (seq:element (presented-rows pres) row-index)
                 (column-index pres column))
        val)
  (setf (changed? pres) t))

(defmethod add-column! ((pres presentation)(label string))
  (update pres)
  (add-column! (get-model pres) label)
  (setf (changed? pres) t))

(defmethod add-row! ((pres presentation))
  (update pres)
  (add-row! (get-model pres))
  (setf (changed? pres) t))

(defmethod set-sort! ((pres presentation)(col column) &key (reverse nil))
  (update pres)
  (setf (sort-column pres) col)
  (setf (reverse-sort? pres) reverse)
  (setf (changed? pres) t))

(defmethod set-sort! ((pres presentation)(column-name string) &key (reverse nil))
  (update pres)
  (setf (sort-column pres) (find-column pres column-name))
  (setf (reverse-sort? pres) reverse)
  (setf (changed? pres) t))

(defmethod set-sort! ((pres presentation)(nothing null) &key (reverse nil))
  (update pres)
  (setf (sort-column pres) nil)
  (setf (reverse-sort? pres) nil)
  (setf (changed? pres) t))

(defmethod set-filter! ((pres presentation)(fstr string))
  (update pres)
  (setf (filter-string pres) fstr)
  (setf (changed? pres) t))

(defmethod set-filter! ((pres presentation)(nothing null))
  (update pres)
  (setf (filter-string pres) nil)
  (setf (changed? pres) t))
