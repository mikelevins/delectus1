;;;; ***********************************************************************
;;;;
;;;; Name:          delectus-libs.asd
;;;; Project:       delectus 2
;;;; Purpose:       Support linraries for Delectus 2
;;;; Author:        mikel evins
;;;; Copyright:     2010-2020 by mikel evins
;;;;
;;;; ***********************************************************************

(ql:quickload :cffi)

(asdf:defsystem #:delectus
  :description "Delectus 2"
  :author "mikel evins <mikel@evins.net>"
  :license  "Apache 2.0"
  :version "2.0.6"
  :serial t
  :depends-on (:fset :fare-csv :cl-intbytes :uuid :sqlite :jonathan :local-time :sxql)
  :components ((:module "src"
                        :serial t
                        :components ((:file "package")
                                     (:file "version")
                                     (:file "system-syntax")         ; syntax for map literals
                                     (:file "system-parameters")     ; application globals
                                     (:file "system-node")           ; fetching and saving the node id
                                     (:file "system-bind")           ; more compact binding of multiple values
                                     (:file "system-utils")          ; general-purpose helpers
                                     (:file "data-identities")       ; delectus-specific UUID format
                                     (:file "data-origins")          ; identifiers for Delectus ops
                                     (:file "data-column-labels")    ; autogenerated labels for userdata columns
                                     (:file "data-timestamps")       ; Delectus-specific timestamps
                                     (:file "store-column-info")     ; sqlite column-info utils
                                     (:file "store-sqlite")          ; operating on SQLite files
                                     (:file "data-columns")          ; working with column descriptions
                                     (:file "store-sqlgen")          ; generating SQL to operate on list files
                                     (:file "store-tables")          ; creating and initializing list-file tables    
                                     (:file "store-columns")         ; working with columns in list files
                                     (:file "store-ops")             ; reading and writing ops in list files
                                     (:file "store-listfile")        ; creating Delectus list files
                                     (:file "model-lists")           ; operations on delectus lists
                                     (:file "data-csv")              ; reading and writing CSV files
                                     ;; making test data
                                     (:file "test-data")
                                     ))))

(defparameter $project-root (make-pathname :directory (pathname-directory *load-pathname*)))

;;; push the project lib directory onto cffi:*foreign-library-directories*
;;; before loading, so we get the project-specific version of SQLite
(defun load-delectus ()
  (let ((project-libdir
          #+(or :mac :os-macosx) (merge-pathnames "delivery/macos/lib/" $project-root)
          #+:linux (merge-pathnames "delivery/linux/ubuntu/x86_64/lib/" $project-root)
          #-(or :mac :os-macosx :linux) nil
          ))
    (pushnew project-libdir
             cffi:*foreign-library-directories*
             :test #'equal)
    (asdf:load-system :delectus)))

;;; (cl-user::load-delectus)
